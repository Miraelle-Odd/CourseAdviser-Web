const express = require("express");
const { Op } = require("sequelize");
const { Card, Suggestion } = require("dialogflow-fulfillment");
const { Bot_Courses, Bot_CourseLevels, Bot_CourseSpecials } = require("../models");

var adviseInfo = {}

const showCourseGeneralInfo = async(agent) => {
    const course = agent.parameters['engcourses'];
    if (course) {
        await Bot_Courses.findOne({
            where: {
                course_name: course
            }
        }).then(async(res) => {
            await Bot_CourseLevels.findAll({
                    where: {
                        course_id: res.dataValues.course_id
                    }
                })
                .then(async(ress) => {
                    agent.add(res.dataValues.course_description)
                    agent.add("Th√¥ng tin chi ti·∫øt xem t·∫°i:")
                    agent.add(new Card({
                        title: res.dataValues.course_name,
                        imageUrl: res.dataValues.course_image,
                        text: res.dataValues.course_description
                    }).setButton({ text: "Chi ti·∫øt", url: res.dataValues.course_page }))

                    agent.add("T√¨m hi·ªÉu th√™m:");
                    ress.map((item, index) => {
                        agent.add(new Suggestion(res.dataValues.course_name + " " + item.dataValues.level_name));
                    })
                    if (res.dataValues.course_name != "Ti·∫øng Anh cho b√©")
                        await Bot_CourseSpecials.findAll({
                            where: {
                                special_name: {
                                    [Op.ne]: "NORMAL"
                                }
                            }
                        }).then(resss => {
                            resss.map((item, index) => {
                                agent.add(new Suggestion(item.dataValues.special_name));
                            })
                        })
                })

        })
    }
}

const showCourseLevelInfo = async(agent) => {
    const course = agent.parameters['engcourses'];
    const level = agent.parameters['engcourselevels'];
    if (course && level) {
        await Bot_CourseLevels.findOne({
                where: {
                    level_name: level
                },
                include: {
                    model: Bot_Courses,
                    as: 'Bot_Course',
                    attributes: ['course_name'],
                    where: {
                        course_name: course
                    }
                }
            })
            .then(res => {
                agent.add(res.dataValues.level_description)
            })
    }
}

const showCourseSpecialInfo = async(agent) => {
    const special = agent.parameters['engcoursespecials'];
    if (special) {
        await Bot_CourseSpecials.findOne({
                where: {
                    special_name: special
                }
            })
            .then(res => {
                agent.add(res.dataValues.special_description)
            })
    }
}

const askCourse = async(agent) => {
    agent.add("C√°m ∆°n b·∫°n ƒë√£ ch·ªçn d·ªãch v·ª• t∆∞ v·∫•n t·ª´ Bot. ƒê·ªÉ Bot ƒë∆∞a ra ƒë∆∞·ª£c g·ª£i √Ω h·ª£p l√Ω nh·∫•t, l√†m phi·ªÅn c√°c b·∫°n tr·∫£ l·ªùi v√†i c√¢u h·ªèi nh·ªè nh√©!")
    agent.add("ƒê·∫ßu ti√™n th√¨ xin h·ªèi b·∫°n c√≥ nhu c·∫ßu tham gia kh√≥a n√†o d∆∞·ªõi ƒë√¢y ·∫°?")
    await Bot_Courses.findAll({
            attributes: ['course_name']
        })
        .then(async(res) => {
            res.map((item, index) => {
                agent.add(new Suggestion(item.dataValues.course_name))
            })
        })
}

const askRequirement = async(agent) => {
    const course = agent.parameters['engcourses'];
    if (course) {
        adviseInfo.course = course
        agent.add("Oh! V·∫≠y l√† b·∫°n c√≥ h·ª©ng th√∫ v·ªõi kh√≥a " + course + " c·ªßa trung t√¢m b·ªçn m√¨nh")
        if (course == "Luy·ªán thi IELTS" || course == "Luy·ªán thi TOEIC") {
            agent.add("Hi·ªán t·∫°i, kh√≥a " + course + " c·ªßa ch√∫ng t√¥i b·∫Øt bu·ªôc b·∫°n ph·∫£i c√≥ ch·ª©ng ch·ªâ ho·∫∑c ƒë√£ thi th·ª≠ t·∫°i trung t√¢m tr∆∞·ªõc ƒë√≥.")
            agent.add("ü§´ Kh√¥ng bi·∫øt k·∫øt qu·∫£ cao nh·∫•t m√† b·∫°n ƒë√£ ƒë·∫°t ƒë∆∞·ª£c l√† bao nhi√™u nh·ªâ ? ü§´")
        }
    }
}

const askGuarantee = async(agent) => {
    var requirement
    if (adviseInfo.course == "Luy·ªán thi IELTS")
        requirement = agent.parameters['reqielts']
    if (adviseInfo.course == "Luy·ªán thi TOEIC")
        requirement = agent.parameters['reqtoeic']
    if (requirement) {
        adviseInfo.requirement = requirement
        agent.add("X√°c nh·∫≠n, k·∫øt qu·∫£ cao nh·∫•t trong " + adviseInfo.course + " c·ªßa b·∫°n t·ª´ng ƒë·∫°t ƒë∆∞·ª£c v√†o t·∫ßm " + requirement + " ü§ó")
        agent.add("ü§î Cho h·ªèi m·ª•c ti√™u ti·∫øp theo c·ªßa b·∫°n l√† bao nhi√™u ? ü§î")
    }
}

const askGivenTime = async(agent) => {
    var guarantee
    if (adviseInfo.course == "Luy·ªán thi IELTS")
        guarantee = agent.parameters['reqielts']
    if (adviseInfo.course == "Luy·ªán thi TOEIC")
        guarantee = agent.parameters['reqtoeic']
    if (guarantee) {
        adviseInfo.guarantee = guarantee
        agent.add("X√°c nh·∫≠n, b·∫°n ƒëang ·ªü m·ª©c kho·∫£ng" + adviseInfo.requirement + " v√† mong mu·ªën ƒë·∫°t ƒë∆∞·ª£c t·∫ßm " + guarantee + " ü§ó")
        agent.add("üôÑ Cho h·ªèi l∆∞·ª£ng th·ªùi gian d·ª± ƒë·ªãnh b·∫°n cho th·∫ø d√†nh cho kh√≥a h·ªçc ? üôÑ")
        agent.add(new Suggestion("Ng·∫Øn nh·∫•t"))
        agent.add(new Suggestion("T·ª´ t·ªën d∆∞ d·∫£"))
    }
}

const giveAdvises = async(agent) => {
    const time = agent.parameters['reqtime']
    if (time) {
        agent.add("M√¨nh t·ªïng k·∫øt l·∫°i x√≠u nha")
        agent.add("B·∫°n ƒëang c√≥ nhu c·∫ßu tham gia kh√≥a " + adviseInfo.course + " c·ªßa ch√∫ng m√¨nh.")
        agent.add("Kh·∫£ nƒÉng c·ªßa b·∫°n ƒëang ·ªü m·ª©c " + adviseInfo.requirement + " v√† b·∫°n mong mu·ªën ƒë·∫°t ƒë∆∞·ª£c m·ª©c " + adviseInfo.guarantee + " ü§ó")
        if (time == "ng·∫Øn")
            agent.add("B√™n c·∫°nh ƒë√≥ th·ªùi gian b·∫°n tham gia h·ªçc t·∫≠p kh√° l√† eo h·∫πp")
        else
            agent.add("B√™n c·∫°nh ƒë√≥ th·ªùi gian b·∫°n tham gia h·ªçc t·∫≠p kh√° l√† d∆∞ d·∫£")

        await Bot_CourseLevels.findAll({
                attributes: ['level_name', 'basic_fee'],
                where: {
                    [Op.or]: [{
                            [Op.and]: [{
                                    guarantee: {
                                        [Op.gt]: adviseInfo.guarantee
                                    }
                                },
                                {
                                    requirement: {
                                        [Op.lt]: adviseInfo.guarantee
                                    }
                                }
                            ]
                        },
                        {
                            [Op.and]: [{
                                    guarantee: {
                                        [Op.gt]: adviseInfo.requirement
                                    }
                                },
                                {
                                    requirement: {
                                        [Op.lt]: adviseInfo.requirement
                                    }
                                }
                            ]
                        },
                        {
                            [Op.and]: [{
                                    guarantee: {
                                        [Op.lt]: adviseInfo.guarantee
                                    }
                                },
                                {
                                    requirement: {
                                        [Op.gt]: adviseInfo.requirement
                                    }
                                }
                            ]
                        },
                    ]

                },
                include: {
                    model: Bot_Courses,
                    as: 'Bot_Course',
                    attributes: ['course_name'],
                    where: {
                        course_name: adviseInfo.course
                    }
                }
            })
            .then((res) => {
                agent.add("C√°c kh√≥a b·∫°n c·∫ßn h·ªçc s·∫Ω l√†:")
                var temp = 0
                res.map((item, index) => {
                    agent.add("- " + adviseInfo.course + " " + item.dataValues.level_name)
                    temp += item.dataValues.basic_fee * 96
                })
                agent.add("T·ªïng h·ªçc ph√≠ ∆∞·ªõc t√≠nh c·∫ßn tr·∫£ s·∫Ω v√†o kho·∫£ng " + temp + "VND v·ªõi kh√≥a h·ªçc k√©o d√†i 96 bu·ªïi trong " + res.length * 12 + " th√°ng")
                if (time == "ng·∫Øn") {
                    agent.add("Tuy nhi√™n, v√¨ th·ªùi gian h·ªçc c·ªßa b·∫°n eo h·∫πp n√™n m√¨nh ƒë·ªÅ xu·∫•t ƒëƒÉng k√≠ ch∆∞∆°ng tr√¨nh C·∫•p t·ªëc. Khi ƒë√≥ th√¨ th·ªùi gian h·ªçc c·ªßa b·∫°n s·∫Ω gi·∫£m ƒëi m·ªôt n·ª≠a, t·ª©c l√† ch·ªâ trong " + res.length * 6 + " th√°ng")
                    agent.add("L∆∞u √Ω : Ch∆∞∆°ng tr√¨nh n√†y c√≥ h·ªá s·ªë h·ªçc ph√≠ l√† 1.5. T·ªïng h·ªçc ph√≠ ∆∞·ªõc t√≠nh v·ªõi kh√≥a h·ªçc tr√™n s·∫Ω t√≠nh l·∫°i l√† " + temp * 1.5 + "VND")
                }
            })
    }
    adviseInfo = {}

}

module.exports = {
    showCourseGeneralInfo,
    showCourseLevelInfo,
    showCourseSpecialInfo,
    askCourse,
    askRequirement,
    askGuarantee,
    askGivenTime,
    giveAdvises
}